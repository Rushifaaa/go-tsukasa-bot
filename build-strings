#!/bin/sh
# -*- sh -*-
# vim: syntax=sh
# code: language=shellscript

if ! command -v jq >/dev/null; then
	echo "$0: jq: program not found" >&2
	exit 1
fi

readonly rootdir_path="$(realpath "$(dirname "$0")")"

readonly langdir_relpath='lang'
readonly langdir_path="$(realpath "$rootdir_path/$langdir_relpath")"
readonly langfile_prefix=''
readonly langfile_suffix='.json'

readonly go_package='strings'

readonly outfile_parentdir_relpath='utilities'
readonly outfile_parentdir_path="$(realpath "$rootdir_path/$outfile_parentdir_relpath")"
readonly outfile_name="$go_package.go"
readonly outfile_path="$(realpath "$outfile_parentdir_path/$outfile_name")"

readonly field_format='const %s = %s\n'

readonly outfile_base="\
/*
 * This file was generated on $(date).
 * DO NOT EDIT THIS FILE AND DO NOT COMMIT IT INTO VERSION CONTROL!
 */

package $go_package

"

outfile_contents=

for langfile in "$langdir_path/$langfile_prefix"*"$langfile_suffix"; do
	if [ "$langfile" = "$langdir_path/$langfile_prefix*$langfile_suffix" ]; then
		echo "$0: no language file in directory $(realpath --relative-to=. "$langdir_path")" >&2
		exit
	fi

	if [ -n "$outfile_contents" ]; then
		echo "$0: multiple languages are not yet supported" >&2
		exit 2
	fi

	outfile_contents="$outfile_base"

	tmpfile="$(mktemp)"
	jq -r 'to_entries[]|(.key)' "$langfile" > "$tmpfile"

	while read -r key; do
		value="$(jq -r ".$key" "$langfile")"
		value="$(printf '%s' "$value" | sed ':a;N;$!ba;'s/'\n'/'\\n'/g)"
		value="$(printf '%s' "$value" | sed s/'"'/'\\"'/g)"
		value="\"$value\""

		# shellcheck disable=2059
		field="$(printf "$field_format" "$key" "$value" && printf x)"
		field="${field%x}"

		outfile_contents="$outfile_contents$field"
	done < "$tmpfile"

	rm "$tmpfile"
done

mkdir -p "$outfile_parentdir_path"
printf '%s' "$outfile_contents" > "$outfile_path"
